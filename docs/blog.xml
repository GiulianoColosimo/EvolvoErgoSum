<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Evolvo Ergo Sum</title>
<link>https://giulianocolosimo.github.com/blog.html</link>
<atom:link href="https://giulianocolosimo.github.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>Ecology, Evolution with a sprinkle of Technology</description>
<generator>quarto-1.3.353</generator>
<lastBuildDate>Mon, 03 Jul 2023 22:00:00 GMT</lastBuildDate>
<item>
  <title>Automated download of weather data from Italian monitoring stations.</title>
  <dc:creator>Giuliano Colosimo</dc:creator>
  <link>https://giulianocolosimo.github.com/posts/accessing_weather_data/index.html</link>
  <description><![CDATA[ 



<p>Last year, during the Conservation Biology course I was teaching, I had planned to do a practical exercise and have the students download and analyse some historical weather data for Italy.</p>
<p>Not too long ago it was possible to download historical weather data relatively easily from a number of different websites. Unfortunately this option is no longer available and there really is only a handful of sites from which it is possible to download historical data for free.</p>
<p>One of them is <a href="https://mesonet.agron.iastate.edu/request/download.phtml">here</a>, hosted on the Iowa State University website. The user interface is pretty intuitive and it is possible to select from a pretty amazing variety of network of data from all over the world.</p>
<p>Another very cool thing about this portal is that it offers a few line of codes, in R and Python, to automate the download of the data of interest. I have tried the R script, but I couldn’t make it work “as is”. I did a few changes to the original code to make it do what it was supposed to do, and since I did it for my students I thought it would be nice to make a blog post. I here provide a full rundown on how to use the script. The description includes the installation of a few necessary packages to download historical weather data. The worked out example shows how to download data for the Italian peninsula, but with a few tweaks and changes it is possible to adapt it to download all data of interest.</p>
<p>Buckle up and lets begin. First of all, let me give you an overview of the OS and R version I am working with. After downloading the appropriate packages the code should work for all platforms. Regardless, I will start by sharing my session information.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sessionInfo</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.4.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/Rome
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       
 [9] rmarkdown_2.22    knitr_1.42        jsonlite_1.8.5    xfun_0.39        
[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
<p>So, I pretty much just opened R and didn’t attach any package but the ones that automatically are loaded when you open a new working session.</p>
<p>To accomplish this task we do need to install and load a few packages that will allow R to interact with web pages and read/download information from the specified website. The code below will install on your machine the necessary packages. Of course, you will not need this step if the packages are already installed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Installing the appropriate packages</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jsonlite"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RCurl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lubridate"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The output of the above line of code is not shown, as the packages are already installed on my machine.</p>
</div>
</div>
<p>Once installed we can load the packages in the current working session.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load packages in the working session</span></span>
<span id="cb4-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jsonlite"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RCurl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lubridate"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(x, require, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">character.only =</span> T)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: jsonlite</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: RCurl</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: lubridate</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'lubridate'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    date, intersect, setdiff, union</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: dplyr</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ggplot2</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] TRUE

[[2]]
[1] TRUE

[[3]]
[1] TRUE

[[4]]
[1] TRUE

[[5]]
[1] TRUE</code></pre>
</div>
</div>
<p>Perfect. If you have a list with all TRUE values it means that everything worked fine, and we can move on to the next steps. We can now specify 2 important variables that will be used in the automated script. We need a start and an end date that will be used to identify the time window of interest for which we would like to download the data of interest.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify the date boundaries of our dataset</span></span>
<span id="cb16-2">date1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ISOdate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1990</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start date in year, month, day format</span></span>
<span id="cb16-3">date2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ISOdate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># end date in year, month, day format</span></span></code></pre></div>
</div>
<p>The second step is to set 2 other variables containing the data network infrastructure from which we want to download the data and the specific country/state of interest.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">user.network <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ASOS"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data network</span></span>
<span id="cb17-2">user.state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IT"</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># state</span></span></code></pre></div>
</div>
<p>If we were to do this procedure manually directly on the ISU web page at this point we will be selecting the appropriate country/state and network from the dedicated drop down menu, as shown in Figure&nbsp;1.</p>
<div id="fig-state_net" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://giulianocolosimo.github.com/posts/accessing_weather_data/data_and_network_blue.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;1: Highlighted in blue is the drop down menu that we could use on the web page to select the specific country/state and data network of interest.</figcaption>
</figure>
</div>
<p>One of the advantages of the automated procedure through R, though, is that once we have perfected the procedure for a specified the country/state and data network we can repeat the same procedure over and over with different states and or location of interest. Anyway, lets keep going with our procedure. From Figure&nbsp;1 it is possible to see that, after selecting the Italian ASOS network, a list of of available weather stations appears in the left box right underneath the <strong>Select Widget for IT_ASOS Network</strong> claim. What the web page is telling us is that of all the weather stations available for the ASOS network in Italy we can pick and choose the ones we want to download the data from. Unless we really know what we are doing and unless we know exactly the precise station we want data from we need to do a little more work to figure out how many stations are available, where they are and what is their specific ID.</p>
<p>So, using a little information taken directly from the URL bar of our browsers we can tell R to open a connection to the desired web page to download the information we need. We do this with the following few lines of code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and open a connection</span></span>
<span id="cb18-2">network <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(user.state, user.network, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__"</span>)</span>
<span id="cb18-3">uri <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://mesonet.agron.iastate.edu/geojson/network/"</span>, network, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".geojson"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb18-4">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span>(uri)</span>
<span id="cb18-5">jdict <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromJSON</span>(data)</span>
<span id="cb18-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(jdict)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "list"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(jdict)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "type"            "features"        "generation_time" "count"          </code></pre>
</div>
</div>
<p>We have created and opened a connection to a <em>.geojson</em> file from the specified webpage containing all the necessary information. All the data are then stored in an object that we have called <strong>jdict</strong>. This is a list with four elements named as indicated above. Based on the names of the list elements we can infer that the second element of the list has the features of interest to us. We can look the first 5 rows of the data frame contained in the second element of the <strong>jdict</strong> list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(jdict[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     type   id properties.elevation properties.sname properties.time_domain
1 Feature LIMG              49.0000          Albenga             (1973-Now)
2 Feature LIEA              23.0000          Alghero             (1957-Now)
3 Feature LIBA              60.0000         Amendola             (1944-Now)
4 Feature LIPY              10.0000           Ancona             (1945-Now)
5 Feature LIMW             545.0000            Aosta             (1984-Now)
6 Feature LIQB             246.8307           Arezzo            (1978-2016)
  properties.archive_begin properties.archive_end properties.state
1               1973-01-01                   &lt;NA&gt;             &lt;NA&gt;
2               1957-06-30                   &lt;NA&gt;             &lt;NA&gt;
3               1944-01-31                   &lt;NA&gt;             &lt;NA&gt;
4               1945-04-14                   &lt;NA&gt;             &lt;NA&gt;
5               1984-06-30                   &lt;NA&gt;             &lt;NA&gt;
6               1978-09-14             2016-03-06                 
  properties.country properties.climate_site properties.wfo properties.tzname
1                 IT                      NA             NA       Europe/Rome
2                 IT                      NA             NA       Europe/Rome
3                 IT                      NA             NA       Europe/Rome
4                 IT                      NA             NA       Europe/Rome
5                 IT                      NA             NA       Europe/Rome
6                 IT                      NA             NA       Europe/Rome
  properties.ncdc81 properties.ncei91 properties.ugc_county properties.ugc_zone
1                NA                NA                    NA                  NA
2                NA                NA                    NA                  NA
3                NA                NA                    NA                  NA
4                NA                NA                    NA                  NA
5                NA                NA                    NA                  NA
6                NA                NA                    NA                  NA
  properties.county properties.sid properties.network geometry.type
1                NA           LIMG           IT__ASOS         Point
2                NA           LIEA           IT__ASOS         Point
3                NA           LIBA           IT__ASOS         Point
4                NA           LIPY           IT__ASOS         Point
5                NA           LIMW           IT__ASOS         Point
6                NA           LIQB           IT__ASOS         Point
  geometry.coordinates
1      8.1256, 44.0458
2      8.2886, 40.6311
3     15.7139, 41.5381
4     13.3603, 43.6167
5      7.3687, 45.7385
6     11.8456, 43.4597</code></pre>
</div>
</div>
<p>As anticipated, this element contains all the information we need. There are 107 stations in Italy from where we can download data. Of the many variables for each location what is more important to us is the <strong>id</strong> of each station, its <strong>properties.sname</strong>, the <strong>properties.time_domain</strong> and the <strong>geometry.coordinates</strong> of each station. In fact, as a simple exercise we can make a plot to see how and where are the stations distributed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">stationsPlot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(jdict<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>geometry<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coordinates), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(stationsPlot[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,], stationsPlot[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asp =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="fig-weather_stations" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://giulianocolosimo.github.com/posts/accessing_weather_data/weather_station.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;2: Location of all weather stations around available from the ISU repository.</figcaption>
</figure>
</div>
<p>It is interesting to see that there are so many stations that they can pretty much reproduce the outline and profile of the iconic Italian boot (Figure&nbsp;2)! This is all nice and good. Now lets get to the fun part. Let us say that we want to download data from ALL the stations available. Using the web interface from Figure&nbsp;1 we would be selecting all the stations from the left box, move them to the right box. Then go to the right side of the page (Figure&nbsp;3) and specify a number of things like the kind of desired output (CSV rather than TXT rather than DAT), the appropriate dates for the time window of interest and what kind of weather variable we would like data for (temperature, rain, wind, etc. etc. etc.).</p>
<div id="fig-download_protocol" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://giulianocolosimo.github.com/posts/accessing_weather_data/data_and_network_red.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;3: Highlighted in red is the section of the page where to specifiy the kind of information needed, the time window of interest and the specific output format.</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Please remember these two points. First, not all stations will have data available for the time window selected. Some stations were only recently activated and it is therefore unlikely that we will be able to get data since, for example, 1970. The other issue is related to the type of variable available for download. The only variable available for bulk download in many data network not US based is only temperature!</p>
</div>
</div>
<p>Now we create a string that contains an URL with the start date and the end date. This is the URL that would appear every time we would download manually the information from the website. At this time we still do not have any information re which station we request the data from.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://mesonet.agron.iastate.edu/cgi-bin/request/asos.py?"</span></span>
<span id="cb25-2">service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(service, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data=all&amp;tz=Etc/UTC&amp;format=comma&amp;latlon=yes&amp;"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb25-3">service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(service, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year1="</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(date1), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;month1="</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(date1), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;day1="</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mday</span>(date1), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb25-4">service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(service, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year2="</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(date2), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;month2="</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(date2), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;day2="</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mday</span>(date2), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&amp;"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb25-5">service</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://mesonet.agron.iastate.edu/cgi-bin/request/asos.py?data=all&amp;tz=Etc/UTC&amp;format=comma&amp;latlon=yes&amp;year1=1990&amp;month1=1&amp;day1=1&amp;year2=2020&amp;month2=12&amp;day2=31&amp;"</code></pre>
</div>
</div>
<p>Now we set the working directory to a dedicated folder. Note that the data could be large several GB, and it may be convenient to store them on an external hard drive.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path/to/your/folder/of/choice"</span>)</span></code></pre></div>
</div>
<p>OK. We are almost there. The final part of this tutorial consists in creating a loop that will take the part of the URL that is constant every time and add, recursively until the very last one, the ID of the weather station we want the data from. Once again, when you run the script make sure that you have enough space on your dedicated folder and that you have enough time and a good internet connection to download all the data. Needless to say that if you first want to try the script on only a few stations you can subset the stations ID and select only 1 or 2 for a quick test.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">it_stations_id <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> jdict<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id</span>
<span id="cb28-2">it_stations_nm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> jdict<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>properties<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sname</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(it_stations_id[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])){</span>
<span id="cb28-5">  uri <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(service, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"station="</span>, it_stations_id[i], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Network:"</span>, network, </span>
<span id="cb28-7">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading:"</span>, it_stations_nm[i], it_stations_id[i], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span>
<span id="cb28-8">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span>(uri)</span>
<span id="cb28-9">  datestring1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(date1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y%m%d"</span>)</span>
<span id="cb28-10">  datestring2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(date2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y%m%d"</span>)</span>
<span id="cb28-11">  outfn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(network, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, it_stations_id[i], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, datestring1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_to_"</span>, datestring2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb28-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download.file</span>(uri, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(outfn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>)</span>
<span id="cb28-13">}</span></code></pre></div>
</div>
<p>As the loop proceeds you should see information on what is being downloaded printed on your R prompt.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Depending on your internet connection it may happen that your download procedure will stop because of time out issues! Unfortunately I am yet to find a proper solution to this problem. Of course, you should make sure that you work with a stable and fast internet connection. If the issue manifests itself, and it usually does with large files, what you can do is to edit the vector of stations to download to momentary exclude the station that gives you problem, finish the download of the other stations and then come back to the one that gives problem to download it by itself.</p>
</div>
</div>
<p>Once the procedure is completed you will have all your data ready to be analysed in your folder. In the next post we will try to look at some of the downloaded data and make a few basic analysis.</p>
<p>Did you like this post? Let me know by e-mail what you think of it or if you were unable to make it work. Till next time.</p>
<p>Cheers</p>



 ]]></description>
  <category>R</category>
  <category>Climate change</category>
  <category>Automated tasks</category>
  <guid>https://giulianocolosimo.github.com/posts/accessing_weather_data/index.html</guid>
  <pubDate>Mon, 03 Jul 2023 22:00:00 GMT</pubDate>
  <media:content url="https://giulianocolosimo.github.com/posts/accessing_weather_data/asos_italy.png" medium="image" type="image/png" height="160" width="144"/>
</item>
</channel>
</rss>
